// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  collaborations ProjectCollaborator[]
  messages      Message[]
  activities    Activity[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  language    String
  shareCode   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String

  owner         User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  collaborators ProjectCollaborator[]
  files         File[]
  messages      Message[]
  activities    Activity[]
}

model ProjectCollaborator {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      Role     @default(MEMBER)
  joinedAt  DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model File {
  id        String   @id @default(cuid())
  name      String
  path      String
  content   String   @db.Text
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  activities Activity[]

  @@unique([projectId, path, name])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  projectId String
  userId    String
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  projectId String
  userId    String
  fileId    String?
  metadata  Json?
  createdAt DateTime     @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  file    File?   @relation(fields: [fileId], references: [id])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum ActivityType {
  FILE_CREATED
  FILE_UPDATED
  FILE_DELETED
  USER_JOINED
  USER_LEFT
  CHAT_MESSAGE
  VOICE_CALL_STARTED
  VOICE_CALL_ENDED
}

